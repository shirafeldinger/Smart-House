{"version":3,"sources":["Components/Home.jsx","Components/AddRoom.jsx","Components/Room.jsx","App.js","serviceWorker.js","index.js"],"names":["Home","props","id","rooms","map","element","i","to","className","key","onClick","select","style","background","color","name","href","AddRoom","useState","setName","setColor","type","setType","onChange","e","target","value","placeholder","document","getElementById","innerHTML","preventDefault","add","Room","image","flag","setFlag","product","setProduct","roomInfo","process","src","products","power","onPowerChange","del","addProduct","show","App","setRooms","currentRoom","setCurrentRoom","addNewRoom","selectRoom","room","roomName","roomIndex","findIndex","alert","length","push","setPower","productIndex","activationValue","removeProducts","tempProducts","filter","index","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5eb8e235.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Home.css\";\r\n\r\nexport default function Home(props) {\r\n  return (\r\n    <div>\r\n      <h4>You can add a room you want to control by clicking the button</h4>\r\n      <div id=\"rooms-list\">\r\n        {props.rooms.map((element, i) => {\r\n          return (\r\n            <Link\r\n              to=\"/room\"\r\n              className=\"room-name\"\r\n              key={i}\r\n              onClick={() => {\r\n                props.select(element, i);\r\n              }}\r\n              style={{ background: element.color }}\r\n            >\r\n              {element.name}\r\n            </Link>\r\n          );\r\n        })}\r\n      </div>{\" \"}\r\n      <a href=\"#\" className=\"arrow down\">\r\n        Down\r\n      </a>\r\n      <Link className=\"btn btn-primary\" to=\"/add-room\">\r\n        Add room\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Home.css\";\r\n\r\nexport default function AddRoom(props) {\r\n  const [name, setName] = useState(\"\");\r\n  const [color, setColor] = useState(\"\");\r\n  const [type, setType] = useState(\"Kitchen\");\r\n\r\n  return (\r\n    <div id=\"add-room\">\r\n      <h2>Add a room to the app</h2>\r\n      <select\r\n        onChange={(e) => {\r\n          setType(e.target.value);\r\n        }}\r\n      >\r\n        <option value=\"Kitchen\">Kitchen</option>\r\n        <option value=\"Bath\">Bath</option>\r\n        <option value=\"Sleeping room\">Sleeping room</option>\r\n      </select>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Room's name\"\r\n        onChange={(e) => {\r\n          setName(e.target.value);\r\n        }}\r\n      />\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Room's button color \"\r\n        onChange={(e) => {\r\n          setColor(e.target.value);\r\n        }}\r\n      />\r\n\r\n      <Link\r\n        className=\"btn btn-primary\"\r\n        to=\"/\"\r\n        onClick={(e) => {\r\n          if (name === \"\") {\r\n            document.getElementById(\"p-add-room\").innerHTML =\r\n              \"You must give the room a name\";\r\n            e.preventDefault();\r\n          } else {\r\n            props.add(name, color, type);\r\n          }\r\n        }}\r\n      >\r\n        Create\r\n      </Link>\r\n      <p id=\"p-add-room\"></p>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Room.css\";\r\n\r\nexport default function Room(props) {\r\n  const [flag, setFlag] = useState(false);\r\n  const [product, setProduct] = useState(\"\");\r\n\r\n  const show = () => {\r\n    if (flag) {\r\n      return (\r\n        <div id=\"add-product\">\r\n          <select\r\n            onChange={(e) => {\r\n              setProduct(e.target.value);\r\n            }}\r\n          >\r\n            <option value=\"\">select a product...</option>\r\n            <option value=\"Air-Conditioner\">Air Conditioner</option>\r\n            <option value=\"Lamp\">Lamp</option>\r\n            <option value=\"Stereo System\">Stereo system</option>\r\n            <option value=\"Boiler\">Boiler</option>\r\n          </select>\r\n          <button\r\n            className=\"btn btn-primary\"\r\n            id=\"add\"\r\n            onClick={() => {\r\n              setFlag(false);\r\n              props.addProduct(product, props.roomInfo.name);\r\n            }}\r\n          >\r\n            Add\r\n          </button>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  const { type } = props.roomInfo;\r\n  let image;\r\n\r\n  switch (type) {\r\n    case \"Kitchen\":\r\n      image = process.env.PUBLIC_URL + \"/kitchen.jpg\";\r\n      break;\r\n    case \"Bath\":\r\n      image = process.env.PUBLIC_URL + \"/bath.jpg\";\r\n      break;\r\n    case \"Sleeping room\":\r\n      image = process.env.PUBLIC_URL + \"/sleeping.jpg\";\r\n      break;\r\n    default:\r\n      image = \"none\";\r\n  }\r\n\r\n  return (\r\n    <div id=\"room\">\r\n      <div id=\"room-detalis\">\r\n        <p>Room name : {props.roomInfo.name}</p>\r\n        <p>Room type : {props.roomInfo.type}</p>\r\n      </div>{\" \"}\r\n      <img id=\"img\" src={image} />\r\n      <div>\r\n        {\" \"}\r\n        <div className=\"alert alert-info\" id=\"explanation\">\r\n          By clicking add product you select which products you want to control\r\n          in your room!\r\n        </div>{\" \"}\r\n        <div className=\"alert alert-secondary\" id=\"exp2\">\r\n          Click on the product to turn it off or on!\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <button\r\n          className=\"btn btn-primary\"\r\n          onClick={() => {\r\n            setFlag(true);\r\n          }}\r\n        >\r\n          Add product\r\n        </button>\r\n        <Link className=\"btn btn-outline-primary\" to=\"/\">\r\n          Back Home\r\n        </Link>\r\n      </div>\r\n      <div id=\"buttons-list\">\r\n        {\" \"}\r\n        {props.roomInfo.products.map((element, i) => {\r\n          return (\r\n            <div key={i}>\r\n              {\" \"}\r\n              <button\r\n                id=\"product-button\"\r\n                className={\r\n                  element.power ? \"btn btn-success \" : \"btn btn-danger \"\r\n                }\r\n                onClick={() => {\r\n                  props.onPowerChange(\r\n                    i,\r\n                    !element.power,\r\n                    element.name,\r\n                    props.roomInfo.name\r\n                  );\r\n                }}\r\n              >\r\n                {element.name}\r\n              </button>\r\n              <button\r\n                className=\"btn btn-outline-danger btn-sm\"\r\n                onClick={() => {\r\n                  props.del(props.roomInfo.name, i);\r\n                }}\r\n              >\r\n                Remove\r\n              </button>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      {show()}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\nimport Home from \"./Components/Home\";\nimport AddRoom from \"./Components/AddRoom\";\nimport Room from \"./Components/Room\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction App() {\n  const [rooms, setRooms] = useState([]);\n  const [currentRoom, setCurrentRoom] = useState(null);\n\n  const addNewRoom = (name, color, type) => {\n    setRooms([...rooms, { name, color, type, products: [] }]);\n  };\n\n  const selectRoom = (room) => {\n    setCurrentRoom(room);\n  };\n\n  const addProduct = (product, roomName) => {\n    const roomIndex = rooms.findIndex((element) => element.name === roomName);\n\n    if (currentRoom.type !== \"Bath\" && product === \"Boiler\") {\n      return alert(\"boiler can be added only to bath\");\n    }\n    if (rooms[roomIndex].products.length >= 5) {\n      return alert(\"can add only 5 products\");\n    }\n\n    for (let i = 0; i < rooms[roomIndex].products.length; i++) {\n      if (\n        rooms[roomIndex].products[i].name === \"Stereo System\" &&\n        product === \"Stereo System\"\n      ) {\n        return alert(\"each room can have only 1 stereo system\");\n      }\n    }\n\n    rooms[roomIndex].products.push({ name: product, power: false });\n    setRooms([...rooms]);\n  };\n\n  const setPower = (productIndex, activationValue, name, roomName) => {\n    const roomIndex = rooms.findIndex((element) => element.name === roomName);\n    rooms[roomIndex].products[productIndex] = { name, power: activationValue };\n    setRooms([...rooms]);\n  };\n\n  const removeProducts = (roomName, i) => {\n    const roomIndex = rooms.findIndex((element) => element.name === roomName);\n\n    let tempProducts = rooms[roomIndex].products.filter(\n      (element, index) => index !== i\n    );\n    rooms[roomIndex].products = [...tempProducts];\n\n    setRooms([...rooms]);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 id=\"headline\">Smart House</h1>\n      <Router>\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            component={() => {\n              return <Home rooms={rooms} select={selectRoom} />;\n            }}\n          />\n          <Route\n            exact\n            path=\"/add-room\"\n            component={() => {\n              return <AddRoom add={addNewRoom} />;\n            }}\n          />\n          <Route\n            exact\n            path=\"/room\"\n            component={() => {\n              return (\n                <Room\n                  roomInfo={currentRoom}\n                  addProduct={addProduct}\n                  onPowerChange={setPower}\n                  del={removeProducts}\n                />\n              );\n            }}\n          />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}